#!/bin/bash
DIR=$(dirname "$0")
cd $DIR/def

export DIR=$(pwd)
export BACKEND_DIR=$DIR/../../backend
svcs="agreement checkout messenger notifier users semantic address identifier auth mailer products images services"
#  --js_out="library=pb_$1,binary:js" \

pbsharedcompile() {
    protoc \
        -I . \
        -I ${GOPATH}/src \
        -I ${GOPATH}/src/github.com/envoyproxy/protoc-gen-validate \
        --go_out="plugins=grpc:../" \
        --validate_out="lang=go:../" \
        shared/$1

    ../cleanpb ./shared/$1 >./clean/shared/$1
}

pbsvccompile() {
    protoc \
        -I . \
        -I ${GOPATH}/src \
        -I ${GOPATH}/src/github.com/envoyproxy/protoc-gen-validate \
        --go_out="plugins=grpc:../" \
        --validate_out="lang=go:../" \
        $1.proto
    ../cleanpb ./$1.proto >./clean/$1.proto
}

pbadd() {
    git add ../pb$1
    git add ../test/pb${svc}test/mock.go
    git commit -m "pb/pb$1: Bump to latest version"
}

pbpropague() {
    if [ $TAG = "" ]; then
        echo "nil tag cant be propagated"
        exit 3
    fi
    cd $BACKEND_DIR/$1
    go get -u github.com/sebach1/coding-challenge/microservices/pb
    go mod tidy
    cd $DIR
}

pbrelease() {
    echo release tag:
    read TAG
    export TAG
    git tag ${TAG} || (echo "TAG ${TAG} ALREADY EXISTS" && exit 3)
    git push origin master
    git push origin ${TAG}
}

echo "build (Y/n):"
read build

if [ ! ${build} = "n" ]; then
    for svc in $svcs; do
        pbsvccompile $svc
        testdir=../test/pb${svc}test
        pkgdir=../pb${svc}

        if [ ! -d $testdir ]; then
            mkdir -p $testdir
        fi

        result=$(mockgen -source ${pkgdir}/${svc}.pb.go -destination ${testdir}/mock.go -package pb${svc}test || echo xd)
        if [ ! ${result} = "" ]; then
            echo $svc
            exit 3
        fi
        pbadd $svc
    done
fi

pbrelease

for svc in $svcs; do
    pbpropague $svc
done

echo "Done"
