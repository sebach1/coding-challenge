#!/bin/bash
DIR=$(dirname "$0")
cd $DIR/def

export DIR=$(pwd)
export BACKEND_DIR=$DIR/../../backend
svcs="films"

pbsvccompile() {
    protoc \
        -I . \
        -I ${GOPATH}/src \
        --go_out=../pbfilms --go_opt=paths=source_relative \
        --go-grpc_out=../pbfilms --go-grpc_opt=paths=source_relative \
        $1.proto
}

pbadd() {
    git add ../pb$1
    git add ../test/pb${svc}test/mock.go
    git commit -m "pb/pb$1: Bump to latest version"
}

pbpropague() {
    if [ "$TAG" = "" ]; then
        echo "nil tag cant be propagated"
        exit 3
    fi
    cd $BACKEND_DIR/$1
    go get -u github.com/sebach1/coding-challenge/microservices/pb
    go mod tidy
    cd $DIR
}

pbrelease() {
    echo release tag:
    read TAG
    export TAG
    git tag ${TAG} || (echo "TAG ${TAG} ALREADY EXISTS" && exit 3)
    git push origin master
    git push origin ${TAG}
}

echo "build (Y/n):"
read build

if [ ! ${build} = "n" ]; then
    for svc in $svcs; do
        pbsvccompile $svc
        testdir=../test/pb${svc}test
        pkgdir=../pb${svc}

        if [ ! -d $testdir ]; then
            mkdir -p $testdir
        fi

        if [ ${svc} = films ]; then
            symbols=FilmsClient,FilmsServer,Films_CreateJoinPeopleFilmServer,Films_CreateJoinPeopleFilmClient,Films_CreatePeopleServer,Films_CreatePeopleClient,Films_CreateFilmsServer
            cd ${pkgdir}
            mockgen -package pb${svc}test . ${symbols} >${testdir}/mock.go
            cd ../def
        else
            result=$(mockgen -source ${pkgdir}/${svc}.pb.go -destination ${testdir}/mock.go -package pb${svc}test || echo xd)
            if [ ! ${result} = "" ]; then
                echo $svc
                exit 3
            fi
        fi
        pbadd $svc
    done
fi

pbrelease

for svc in $svcs; do
    pbpropague $svc
done

echo "Done"
