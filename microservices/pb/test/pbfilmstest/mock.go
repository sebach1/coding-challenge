// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sebach1/coding-challenge/microservices/pb/pbfilms (interfaces: FilmsClient,FilmsServer,Films_CreateJoinPeopleFilmServer,Films_CreateJoinPeopleFilmClient,Films_CreatePeopleServer,Films_CreatePeopleClient,Films_CreateFilmsServer)

// Package pbfilmstest is a generated GoMock package.
package pbfilmstest

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	pbfilms "github.com/sebach1/coding-challenge/microservices/pb/pbfilms"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
)

// MockFilmsClient is a mock of FilmsClient interface
type MockFilmsClient struct {
	ctrl     *gomock.Controller
	recorder *MockFilmsClientMockRecorder
}

// MockFilmsClientMockRecorder is the mock recorder for MockFilmsClient
type MockFilmsClientMockRecorder struct {
	mock *MockFilmsClient
}

// NewMockFilmsClient creates a new mock instance
func NewMockFilmsClient(ctrl *gomock.Controller) *MockFilmsClient {
	mock := &MockFilmsClient{ctrl: ctrl}
	mock.recorder = &MockFilmsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFilmsClient) EXPECT() *MockFilmsClientMockRecorder {
	return m.recorder
}

// CreateFilms mocks base method
func (m *MockFilmsClient) CreateFilms(arg0 context.Context, arg1 ...grpc.CallOption) (pbfilms.Films_CreateFilmsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFilms", varargs...)
	ret0, _ := ret[0].(pbfilms.Films_CreateFilmsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFilms indicates an expected call of CreateFilms
func (mr *MockFilmsClientMockRecorder) CreateFilms(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilms", reflect.TypeOf((*MockFilmsClient)(nil).CreateFilms), varargs...)
}

// CreateJoinPeopleFilm mocks base method
func (m *MockFilmsClient) CreateJoinPeopleFilm(arg0 context.Context, arg1 ...grpc.CallOption) (pbfilms.Films_CreateJoinPeopleFilmClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateJoinPeopleFilm", varargs...)
	ret0, _ := ret[0].(pbfilms.Films_CreateJoinPeopleFilmClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJoinPeopleFilm indicates an expected call of CreateJoinPeopleFilm
func (mr *MockFilmsClientMockRecorder) CreateJoinPeopleFilm(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJoinPeopleFilm", reflect.TypeOf((*MockFilmsClient)(nil).CreateJoinPeopleFilm), varargs...)
}

// CreatePeople mocks base method
func (m *MockFilmsClient) CreatePeople(arg0 context.Context, arg1 ...grpc.CallOption) (pbfilms.Films_CreatePeopleClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePeople", varargs...)
	ret0, _ := ret[0].(pbfilms.Films_CreatePeopleClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePeople indicates an expected call of CreatePeople
func (mr *MockFilmsClientMockRecorder) CreatePeople(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePeople", reflect.TypeOf((*MockFilmsClient)(nil).CreatePeople), varargs...)
}

// RetrieveFilm mocks base method
func (m *MockFilmsClient) RetrieveFilm(arg0 context.Context, arg1 *pbfilms.RetrieveFilmRequest, arg2 ...grpc.CallOption) (*pbfilms.RetrieveFilmResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveFilm", varargs...)
	ret0, _ := ret[0].(*pbfilms.RetrieveFilmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveFilm indicates an expected call of RetrieveFilm
func (mr *MockFilmsClientMockRecorder) RetrieveFilm(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveFilm", reflect.TypeOf((*MockFilmsClient)(nil).RetrieveFilm), varargs...)
}

// RetrieveFilms mocks base method
func (m *MockFilmsClient) RetrieveFilms(arg0 context.Context, arg1 *pbfilms.RetrieveFilmsRequest, arg2 ...grpc.CallOption) (*pbfilms.RetrieveFilmsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveFilms", varargs...)
	ret0, _ := ret[0].(*pbfilms.RetrieveFilmsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveFilms indicates an expected call of RetrieveFilms
func (mr *MockFilmsClientMockRecorder) RetrieveFilms(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveFilms", reflect.TypeOf((*MockFilmsClient)(nil).RetrieveFilms), varargs...)
}

// RetrieveFilmsWithPeople mocks base method
func (m *MockFilmsClient) RetrieveFilmsWithPeople(arg0 context.Context, arg1 *pbfilms.RetrieveFilmsWithPeopleRequest, arg2 ...grpc.CallOption) (*pbfilms.RetrieveFilmsWithPeopleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveFilmsWithPeople", varargs...)
	ret0, _ := ret[0].(*pbfilms.RetrieveFilmsWithPeopleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveFilmsWithPeople indicates an expected call of RetrieveFilmsWithPeople
func (mr *MockFilmsClientMockRecorder) RetrieveFilmsWithPeople(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveFilmsWithPeople", reflect.TypeOf((*MockFilmsClient)(nil).RetrieveFilmsWithPeople), varargs...)
}

// MockFilmsServer is a mock of FilmsServer interface
type MockFilmsServer struct {
	ctrl     *gomock.Controller
	recorder *MockFilmsServerMockRecorder
}

// MockFilmsServerMockRecorder is the mock recorder for MockFilmsServer
type MockFilmsServerMockRecorder struct {
	mock *MockFilmsServer
}

// NewMockFilmsServer creates a new mock instance
func NewMockFilmsServer(ctrl *gomock.Controller) *MockFilmsServer {
	mock := &MockFilmsServer{ctrl: ctrl}
	mock.recorder = &MockFilmsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFilmsServer) EXPECT() *MockFilmsServerMockRecorder {
	return m.recorder
}

// CreateFilms mocks base method
func (m *MockFilmsServer) CreateFilms(arg0 pbfilms.Films_CreateFilmsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFilms", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFilms indicates an expected call of CreateFilms
func (mr *MockFilmsServerMockRecorder) CreateFilms(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilms", reflect.TypeOf((*MockFilmsServer)(nil).CreateFilms), arg0)
}

// CreateJoinPeopleFilm mocks base method
func (m *MockFilmsServer) CreateJoinPeopleFilm(arg0 pbfilms.Films_CreateJoinPeopleFilmServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJoinPeopleFilm", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateJoinPeopleFilm indicates an expected call of CreateJoinPeopleFilm
func (mr *MockFilmsServerMockRecorder) CreateJoinPeopleFilm(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJoinPeopleFilm", reflect.TypeOf((*MockFilmsServer)(nil).CreateJoinPeopleFilm), arg0)
}

// CreatePeople mocks base method
func (m *MockFilmsServer) CreatePeople(arg0 pbfilms.Films_CreatePeopleServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePeople", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePeople indicates an expected call of CreatePeople
func (mr *MockFilmsServerMockRecorder) CreatePeople(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePeople", reflect.TypeOf((*MockFilmsServer)(nil).CreatePeople), arg0)
}

// RetrieveFilm mocks base method
func (m *MockFilmsServer) RetrieveFilm(arg0 context.Context, arg1 *pbfilms.RetrieveFilmRequest) (*pbfilms.RetrieveFilmResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveFilm", arg0, arg1)
	ret0, _ := ret[0].(*pbfilms.RetrieveFilmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveFilm indicates an expected call of RetrieveFilm
func (mr *MockFilmsServerMockRecorder) RetrieveFilm(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveFilm", reflect.TypeOf((*MockFilmsServer)(nil).RetrieveFilm), arg0, arg1)
}

// RetrieveFilms mocks base method
func (m *MockFilmsServer) RetrieveFilms(arg0 context.Context, arg1 *pbfilms.RetrieveFilmsRequest) (*pbfilms.RetrieveFilmsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveFilms", arg0, arg1)
	ret0, _ := ret[0].(*pbfilms.RetrieveFilmsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveFilms indicates an expected call of RetrieveFilms
func (mr *MockFilmsServerMockRecorder) RetrieveFilms(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveFilms", reflect.TypeOf((*MockFilmsServer)(nil).RetrieveFilms), arg0, arg1)
}

// RetrieveFilmsWithPeople mocks base method
func (m *MockFilmsServer) RetrieveFilmsWithPeople(arg0 context.Context, arg1 *pbfilms.RetrieveFilmsWithPeopleRequest) (*pbfilms.RetrieveFilmsWithPeopleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveFilmsWithPeople", arg0, arg1)
	ret0, _ := ret[0].(*pbfilms.RetrieveFilmsWithPeopleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveFilmsWithPeople indicates an expected call of RetrieveFilmsWithPeople
func (mr *MockFilmsServerMockRecorder) RetrieveFilmsWithPeople(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveFilmsWithPeople", reflect.TypeOf((*MockFilmsServer)(nil).RetrieveFilmsWithPeople), arg0, arg1)
}

// mustEmbedUnimplementedFilmsServer mocks base method
func (m *MockFilmsServer) mustEmbedUnimplementedFilmsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFilmsServer")
}

// mustEmbedUnimplementedFilmsServer indicates an expected call of mustEmbedUnimplementedFilmsServer
func (mr *MockFilmsServerMockRecorder) mustEmbedUnimplementedFilmsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFilmsServer", reflect.TypeOf((*MockFilmsServer)(nil).mustEmbedUnimplementedFilmsServer))
}

// MockFilms_CreateJoinPeopleFilmServer is a mock of Films_CreateJoinPeopleFilmServer interface
type MockFilms_CreateJoinPeopleFilmServer struct {
	ctrl     *gomock.Controller
	recorder *MockFilms_CreateJoinPeopleFilmServerMockRecorder
}

// MockFilms_CreateJoinPeopleFilmServerMockRecorder is the mock recorder for MockFilms_CreateJoinPeopleFilmServer
type MockFilms_CreateJoinPeopleFilmServerMockRecorder struct {
	mock *MockFilms_CreateJoinPeopleFilmServer
}

// NewMockFilms_CreateJoinPeopleFilmServer creates a new mock instance
func NewMockFilms_CreateJoinPeopleFilmServer(ctrl *gomock.Controller) *MockFilms_CreateJoinPeopleFilmServer {
	mock := &MockFilms_CreateJoinPeopleFilmServer{ctrl: ctrl}
	mock.recorder = &MockFilms_CreateJoinPeopleFilmServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFilms_CreateJoinPeopleFilmServer) EXPECT() *MockFilms_CreateJoinPeopleFilmServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockFilms_CreateJoinPeopleFilmServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockFilms_CreateJoinPeopleFilmServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFilms_CreateJoinPeopleFilmServer)(nil).Context))
}

// Recv mocks base method
func (m *MockFilms_CreateJoinPeopleFilmServer) Recv() (*pbfilms.CreateJoinPeopleFilmRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pbfilms.CreateJoinPeopleFilmRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockFilms_CreateJoinPeopleFilmServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockFilms_CreateJoinPeopleFilmServer)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockFilms_CreateJoinPeopleFilmServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockFilms_CreateJoinPeopleFilmServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFilms_CreateJoinPeopleFilmServer)(nil).RecvMsg), arg0)
}

// SendAndClose mocks base method
func (m *MockFilms_CreateJoinPeopleFilmServer) SendAndClose(arg0 *emptypb.Empty) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose
func (mr *MockFilms_CreateJoinPeopleFilmServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockFilms_CreateJoinPeopleFilmServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method
func (m *MockFilms_CreateJoinPeopleFilmServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockFilms_CreateJoinPeopleFilmServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockFilms_CreateJoinPeopleFilmServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockFilms_CreateJoinPeopleFilmServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockFilms_CreateJoinPeopleFilmServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFilms_CreateJoinPeopleFilmServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockFilms_CreateJoinPeopleFilmServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockFilms_CreateJoinPeopleFilmServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockFilms_CreateJoinPeopleFilmServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockFilms_CreateJoinPeopleFilmServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockFilms_CreateJoinPeopleFilmServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockFilms_CreateJoinPeopleFilmServer)(nil).SetTrailer), arg0)
}

// MockFilms_CreateJoinPeopleFilmClient is a mock of Films_CreateJoinPeopleFilmClient interface
type MockFilms_CreateJoinPeopleFilmClient struct {
	ctrl     *gomock.Controller
	recorder *MockFilms_CreateJoinPeopleFilmClientMockRecorder
}

// MockFilms_CreateJoinPeopleFilmClientMockRecorder is the mock recorder for MockFilms_CreateJoinPeopleFilmClient
type MockFilms_CreateJoinPeopleFilmClientMockRecorder struct {
	mock *MockFilms_CreateJoinPeopleFilmClient
}

// NewMockFilms_CreateJoinPeopleFilmClient creates a new mock instance
func NewMockFilms_CreateJoinPeopleFilmClient(ctrl *gomock.Controller) *MockFilms_CreateJoinPeopleFilmClient {
	mock := &MockFilms_CreateJoinPeopleFilmClient{ctrl: ctrl}
	mock.recorder = &MockFilms_CreateJoinPeopleFilmClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFilms_CreateJoinPeopleFilmClient) EXPECT() *MockFilms_CreateJoinPeopleFilmClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method
func (m *MockFilms_CreateJoinPeopleFilmClient) CloseAndRecv() (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv
func (mr *MockFilms_CreateJoinPeopleFilmClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockFilms_CreateJoinPeopleFilmClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method
func (m *MockFilms_CreateJoinPeopleFilmClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockFilms_CreateJoinPeopleFilmClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockFilms_CreateJoinPeopleFilmClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockFilms_CreateJoinPeopleFilmClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockFilms_CreateJoinPeopleFilmClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFilms_CreateJoinPeopleFilmClient)(nil).Context))
}

// Header mocks base method
func (m *MockFilms_CreateJoinPeopleFilmClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockFilms_CreateJoinPeopleFilmClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockFilms_CreateJoinPeopleFilmClient)(nil).Header))
}

// RecvMsg mocks base method
func (m *MockFilms_CreateJoinPeopleFilmClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockFilms_CreateJoinPeopleFilmClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFilms_CreateJoinPeopleFilmClient)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockFilms_CreateJoinPeopleFilmClient) Send(arg0 *pbfilms.CreateJoinPeopleFilmRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockFilms_CreateJoinPeopleFilmClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockFilms_CreateJoinPeopleFilmClient)(nil).Send), arg0)
}

// SendMsg mocks base method
func (m *MockFilms_CreateJoinPeopleFilmClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockFilms_CreateJoinPeopleFilmClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFilms_CreateJoinPeopleFilmClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockFilms_CreateJoinPeopleFilmClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockFilms_CreateJoinPeopleFilmClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockFilms_CreateJoinPeopleFilmClient)(nil).Trailer))
}

// MockFilms_CreatePeopleServer is a mock of Films_CreatePeopleServer interface
type MockFilms_CreatePeopleServer struct {
	ctrl     *gomock.Controller
	recorder *MockFilms_CreatePeopleServerMockRecorder
}

// MockFilms_CreatePeopleServerMockRecorder is the mock recorder for MockFilms_CreatePeopleServer
type MockFilms_CreatePeopleServerMockRecorder struct {
	mock *MockFilms_CreatePeopleServer
}

// NewMockFilms_CreatePeopleServer creates a new mock instance
func NewMockFilms_CreatePeopleServer(ctrl *gomock.Controller) *MockFilms_CreatePeopleServer {
	mock := &MockFilms_CreatePeopleServer{ctrl: ctrl}
	mock.recorder = &MockFilms_CreatePeopleServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFilms_CreatePeopleServer) EXPECT() *MockFilms_CreatePeopleServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockFilms_CreatePeopleServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockFilms_CreatePeopleServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFilms_CreatePeopleServer)(nil).Context))
}

// Recv mocks base method
func (m *MockFilms_CreatePeopleServer) Recv() (*pbfilms.CreatePeopleRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pbfilms.CreatePeopleRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockFilms_CreatePeopleServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockFilms_CreatePeopleServer)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockFilms_CreatePeopleServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockFilms_CreatePeopleServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFilms_CreatePeopleServer)(nil).RecvMsg), arg0)
}

// SendAndClose mocks base method
func (m *MockFilms_CreatePeopleServer) SendAndClose(arg0 *emptypb.Empty) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose
func (mr *MockFilms_CreatePeopleServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockFilms_CreatePeopleServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method
func (m *MockFilms_CreatePeopleServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockFilms_CreatePeopleServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockFilms_CreatePeopleServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockFilms_CreatePeopleServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockFilms_CreatePeopleServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFilms_CreatePeopleServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockFilms_CreatePeopleServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockFilms_CreatePeopleServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockFilms_CreatePeopleServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockFilms_CreatePeopleServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockFilms_CreatePeopleServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockFilms_CreatePeopleServer)(nil).SetTrailer), arg0)
}

// MockFilms_CreatePeopleClient is a mock of Films_CreatePeopleClient interface
type MockFilms_CreatePeopleClient struct {
	ctrl     *gomock.Controller
	recorder *MockFilms_CreatePeopleClientMockRecorder
}

// MockFilms_CreatePeopleClientMockRecorder is the mock recorder for MockFilms_CreatePeopleClient
type MockFilms_CreatePeopleClientMockRecorder struct {
	mock *MockFilms_CreatePeopleClient
}

// NewMockFilms_CreatePeopleClient creates a new mock instance
func NewMockFilms_CreatePeopleClient(ctrl *gomock.Controller) *MockFilms_CreatePeopleClient {
	mock := &MockFilms_CreatePeopleClient{ctrl: ctrl}
	mock.recorder = &MockFilms_CreatePeopleClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFilms_CreatePeopleClient) EXPECT() *MockFilms_CreatePeopleClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method
func (m *MockFilms_CreatePeopleClient) CloseAndRecv() (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv
func (mr *MockFilms_CreatePeopleClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockFilms_CreatePeopleClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method
func (m *MockFilms_CreatePeopleClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockFilms_CreatePeopleClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockFilms_CreatePeopleClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockFilms_CreatePeopleClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockFilms_CreatePeopleClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFilms_CreatePeopleClient)(nil).Context))
}

// Header mocks base method
func (m *MockFilms_CreatePeopleClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockFilms_CreatePeopleClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockFilms_CreatePeopleClient)(nil).Header))
}

// RecvMsg mocks base method
func (m *MockFilms_CreatePeopleClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockFilms_CreatePeopleClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFilms_CreatePeopleClient)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockFilms_CreatePeopleClient) Send(arg0 *pbfilms.CreatePeopleRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockFilms_CreatePeopleClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockFilms_CreatePeopleClient)(nil).Send), arg0)
}

// SendMsg mocks base method
func (m *MockFilms_CreatePeopleClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockFilms_CreatePeopleClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFilms_CreatePeopleClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockFilms_CreatePeopleClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockFilms_CreatePeopleClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockFilms_CreatePeopleClient)(nil).Trailer))
}

// MockFilms_CreateFilmsServer is a mock of Films_CreateFilmsServer interface
type MockFilms_CreateFilmsServer struct {
	ctrl     *gomock.Controller
	recorder *MockFilms_CreateFilmsServerMockRecorder
}

// MockFilms_CreateFilmsServerMockRecorder is the mock recorder for MockFilms_CreateFilmsServer
type MockFilms_CreateFilmsServerMockRecorder struct {
	mock *MockFilms_CreateFilmsServer
}

// NewMockFilms_CreateFilmsServer creates a new mock instance
func NewMockFilms_CreateFilmsServer(ctrl *gomock.Controller) *MockFilms_CreateFilmsServer {
	mock := &MockFilms_CreateFilmsServer{ctrl: ctrl}
	mock.recorder = &MockFilms_CreateFilmsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFilms_CreateFilmsServer) EXPECT() *MockFilms_CreateFilmsServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockFilms_CreateFilmsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockFilms_CreateFilmsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFilms_CreateFilmsServer)(nil).Context))
}

// Recv mocks base method
func (m *MockFilms_CreateFilmsServer) Recv() (*pbfilms.CreateFilmRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pbfilms.CreateFilmRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockFilms_CreateFilmsServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockFilms_CreateFilmsServer)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockFilms_CreateFilmsServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockFilms_CreateFilmsServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFilms_CreateFilmsServer)(nil).RecvMsg), arg0)
}

// SendAndClose mocks base method
func (m *MockFilms_CreateFilmsServer) SendAndClose(arg0 *emptypb.Empty) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose
func (mr *MockFilms_CreateFilmsServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockFilms_CreateFilmsServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method
func (m *MockFilms_CreateFilmsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockFilms_CreateFilmsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockFilms_CreateFilmsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockFilms_CreateFilmsServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockFilms_CreateFilmsServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFilms_CreateFilmsServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockFilms_CreateFilmsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockFilms_CreateFilmsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockFilms_CreateFilmsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockFilms_CreateFilmsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockFilms_CreateFilmsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockFilms_CreateFilmsServer)(nil).SetTrailer), arg0)
}
