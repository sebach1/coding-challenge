/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.exportSymbol('proto.films.CreateFilmRequest', null, global);
goog.exportSymbol('proto.films.CreateJoinPeopleFilmRequest', null, global);
goog.exportSymbol('proto.films.CreatePeopleRequest', null, global);
goog.exportSymbol('proto.films.FilmData', null, global);
goog.exportSymbol('proto.films.FilmDataWithPeople', null, global);
goog.exportSymbol('proto.films.PeopleData', null, global);
goog.exportSymbol('proto.films.RetrieveFilmRequest', null, global);
goog.exportSymbol('proto.films.RetrieveFilmResponse', null, global);
goog.exportSymbol('proto.films.RetrieveFilmsRequest', null, global);
goog.exportSymbol('proto.films.RetrieveFilmsResponse', null, global);
goog.exportSymbol('proto.films.RetrieveFilmsWithPeopleRequest', null, global);
goog.exportSymbol('proto.films.RetrieveFilmsWithPeopleResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.films.PeopleData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.films.PeopleData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.films.PeopleData.displayName = 'proto.films.PeopleData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.films.PeopleData.prototype.toObject = function(opt_includeInstance) {
  return proto.films.PeopleData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.films.PeopleData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.films.PeopleData.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    externalReference: jspb.Message.getFieldWithDefault(msg, 2, ""),
    age: jspb.Message.getFieldWithDefault(msg, 3, ""),
    gender: jspb.Message.getFieldWithDefault(msg, 4, ""),
    hairColor: jspb.Message.getFieldWithDefault(msg, 5, ""),
    eyeColor: jspb.Message.getFieldWithDefault(msg, 6, ""),
    slug: jspb.Message.getFieldWithDefault(msg, 8, ""),
    id: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.films.PeopleData}
 */
proto.films.PeopleData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.films.PeopleData;
  return proto.films.PeopleData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.films.PeopleData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.films.PeopleData}
 */
proto.films.PeopleData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExternalReference(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAge(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGender(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setHairColor(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setEyeColor(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlug(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.films.PeopleData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.films.PeopleData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.films.PeopleData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.films.PeopleData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExternalReference();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAge();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGender();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getHairColor();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getEyeColor();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSlug();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.films.PeopleData.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.films.PeopleData.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string external_reference = 2;
 * @return {string}
 */
proto.films.PeopleData.prototype.getExternalReference = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.films.PeopleData.prototype.setExternalReference = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string age = 3;
 * @return {string}
 */
proto.films.PeopleData.prototype.getAge = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.films.PeopleData.prototype.setAge = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string gender = 4;
 * @return {string}
 */
proto.films.PeopleData.prototype.getGender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.films.PeopleData.prototype.setGender = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string hair_color = 5;
 * @return {string}
 */
proto.films.PeopleData.prototype.getHairColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.films.PeopleData.prototype.setHairColor = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string eye_color = 6;
 * @return {string}
 */
proto.films.PeopleData.prototype.getEyeColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.films.PeopleData.prototype.setEyeColor = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string slug = 8;
 * @return {string}
 */
proto.films.PeopleData.prototype.getSlug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.films.PeopleData.prototype.setSlug = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional uint64 id = 9;
 * @return {number}
 */
proto.films.PeopleData.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.films.PeopleData.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.films.FilmData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.films.FilmData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.films.FilmData.displayName = 'proto.films.FilmData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.films.FilmData.prototype.toObject = function(opt_includeInstance) {
  return proto.films.FilmData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.films.FilmData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.films.FilmData.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    externalReference: jspb.Message.getFieldWithDefault(msg, 2, ""),
    releaseYear: jspb.Message.getFieldWithDefault(msg, 3, 0),
    directorName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    producerName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    rating: jspb.Message.getFieldWithDefault(msg, 6, 0),
    id: jspb.Message.getFieldWithDefault(msg, 7, 0),
    slug: jspb.Message.getFieldWithDefault(msg, 8, ""),
    description: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.films.FilmData}
 */
proto.films.FilmData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.films.FilmData;
  return proto.films.FilmData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.films.FilmData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.films.FilmData}
 */
proto.films.FilmData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExternalReference(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setReleaseYear(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDirectorName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setProducerName(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRating(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlug(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.films.FilmData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.films.FilmData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.films.FilmData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.films.FilmData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExternalReference();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReleaseYear();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getDirectorName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getProducerName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRating();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getSlug();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.films.FilmData.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.films.FilmData.prototype.setTitle = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string external_reference = 2;
 * @return {string}
 */
proto.films.FilmData.prototype.getExternalReference = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.films.FilmData.prototype.setExternalReference = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 release_year = 3;
 * @return {number}
 */
proto.films.FilmData.prototype.getReleaseYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.films.FilmData.prototype.setReleaseYear = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string director_name = 4;
 * @return {string}
 */
proto.films.FilmData.prototype.getDirectorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.films.FilmData.prototype.setDirectorName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string producer_name = 5;
 * @return {string}
 */
proto.films.FilmData.prototype.getProducerName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.films.FilmData.prototype.setProducerName = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint64 rating = 6;
 * @return {number}
 */
proto.films.FilmData.prototype.getRating = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.films.FilmData.prototype.setRating = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 id = 7;
 * @return {number}
 */
proto.films.FilmData.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.films.FilmData.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string slug = 8;
 * @return {string}
 */
proto.films.FilmData.prototype.getSlug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.films.FilmData.prototype.setSlug = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string description = 9;
 * @return {string}
 */
proto.films.FilmData.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.films.FilmData.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.films.FilmDataWithPeople = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.films.FilmDataWithPeople, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.films.FilmDataWithPeople.displayName = 'proto.films.FilmDataWithPeople';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.films.FilmDataWithPeople.prototype.toObject = function(opt_includeInstance) {
  return proto.films.FilmDataWithPeople.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.films.FilmDataWithPeople} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.films.FilmDataWithPeople.toObject = function(includeInstance, msg) {
  var f, obj = {
    film: (f = msg.getFilm()) && proto.films.FilmData.toObject(includeInstance, f),
    peopleMap: (f = msg.getPeopleMap()) ? f.toObject(includeInstance, proto.films.PeopleData.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.films.FilmDataWithPeople}
 */
proto.films.FilmDataWithPeople.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.films.FilmDataWithPeople;
  return proto.films.FilmDataWithPeople.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.films.FilmDataWithPeople} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.films.FilmDataWithPeople}
 */
proto.films.FilmDataWithPeople.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.films.FilmData;
      reader.readMessage(value,proto.films.FilmData.deserializeBinaryFromReader);
      msg.setFilm(value);
      break;
    case 2:
      var value = msg.getPeopleMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.films.PeopleData.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.films.FilmDataWithPeople.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.films.FilmDataWithPeople.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.films.FilmDataWithPeople} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.films.FilmDataWithPeople.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilm();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.films.FilmData.serializeBinaryToWriter
    );
  }
  f = message.getPeopleMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.films.PeopleData.serializeBinaryToWriter);
  }
};


/**
 * optional FilmData film = 1;
 * @return {?proto.films.FilmData}
 */
proto.films.FilmDataWithPeople.prototype.getFilm = function() {
  return /** @type{?proto.films.FilmData} */ (
    jspb.Message.getWrapperField(this, proto.films.FilmData, 1));
};


/** @param {?proto.films.FilmData|undefined} value */
proto.films.FilmDataWithPeople.prototype.setFilm = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.films.FilmDataWithPeople.prototype.clearFilm = function() {
  this.setFilm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.films.FilmDataWithPeople.prototype.hasFilm = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * map<string, PeopleData> people = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.films.PeopleData>}
 */
proto.films.FilmDataWithPeople.prototype.getPeopleMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.films.PeopleData>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.films.PeopleData));
};


proto.films.FilmDataWithPeople.prototype.clearPeopleMap = function() {
  this.getPeopleMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.films.RetrieveFilmsWithPeopleRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.films.RetrieveFilmsWithPeopleRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.films.RetrieveFilmsWithPeopleRequest.displayName = 'proto.films.RetrieveFilmsWithPeopleRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.films.RetrieveFilmsWithPeopleRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.films.RetrieveFilmsWithPeopleRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.films.RetrieveFilmsWithPeopleRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.films.RetrieveFilmsWithPeopleRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    limit: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.films.RetrieveFilmsWithPeopleRequest}
 */
proto.films.RetrieveFilmsWithPeopleRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.films.RetrieveFilmsWithPeopleRequest;
  return proto.films.RetrieveFilmsWithPeopleRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.films.RetrieveFilmsWithPeopleRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.films.RetrieveFilmsWithPeopleRequest}
 */
proto.films.RetrieveFilmsWithPeopleRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.films.RetrieveFilmsWithPeopleRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.films.RetrieveFilmsWithPeopleRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.films.RetrieveFilmsWithPeopleRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.films.RetrieveFilmsWithPeopleRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 limit = 1;
 * @return {number}
 */
proto.films.RetrieveFilmsWithPeopleRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.films.RetrieveFilmsWithPeopleRequest.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.films.RetrieveFilmsWithPeopleResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.films.RetrieveFilmsWithPeopleResponse.repeatedFields_, null);
};
goog.inherits(proto.films.RetrieveFilmsWithPeopleResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.films.RetrieveFilmsWithPeopleResponse.displayName = 'proto.films.RetrieveFilmsWithPeopleResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.films.RetrieveFilmsWithPeopleResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.films.RetrieveFilmsWithPeopleResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.films.RetrieveFilmsWithPeopleResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.films.RetrieveFilmsWithPeopleResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.films.RetrieveFilmsWithPeopleResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    filmsList: jspb.Message.toObjectList(msg.getFilmsList(),
    proto.films.FilmDataWithPeople.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.films.RetrieveFilmsWithPeopleResponse}
 */
proto.films.RetrieveFilmsWithPeopleResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.films.RetrieveFilmsWithPeopleResponse;
  return proto.films.RetrieveFilmsWithPeopleResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.films.RetrieveFilmsWithPeopleResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.films.RetrieveFilmsWithPeopleResponse}
 */
proto.films.RetrieveFilmsWithPeopleResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.films.FilmDataWithPeople;
      reader.readMessage(value,proto.films.FilmDataWithPeople.deserializeBinaryFromReader);
      msg.addFilms(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.films.RetrieveFilmsWithPeopleResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.films.RetrieveFilmsWithPeopleResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.films.RetrieveFilmsWithPeopleResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.films.RetrieveFilmsWithPeopleResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilmsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.films.FilmDataWithPeople.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FilmDataWithPeople films = 1;
 * @return {!Array<!proto.films.FilmDataWithPeople>}
 */
proto.films.RetrieveFilmsWithPeopleResponse.prototype.getFilmsList = function() {
  return /** @type{!Array<!proto.films.FilmDataWithPeople>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.films.FilmDataWithPeople, 1));
};


/** @param {!Array<!proto.films.FilmDataWithPeople>} value */
proto.films.RetrieveFilmsWithPeopleResponse.prototype.setFilmsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.films.FilmDataWithPeople=} opt_value
 * @param {number=} opt_index
 * @return {!proto.films.FilmDataWithPeople}
 */
proto.films.RetrieveFilmsWithPeopleResponse.prototype.addFilms = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.films.FilmDataWithPeople, opt_index);
};


proto.films.RetrieveFilmsWithPeopleResponse.prototype.clearFilmsList = function() {
  this.setFilmsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.films.RetrieveFilmsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.films.RetrieveFilmsResponse.repeatedFields_, null);
};
goog.inherits(proto.films.RetrieveFilmsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.films.RetrieveFilmsResponse.displayName = 'proto.films.RetrieveFilmsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.films.RetrieveFilmsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.films.RetrieveFilmsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.films.RetrieveFilmsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.films.RetrieveFilmsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.films.RetrieveFilmsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    filmsList: jspb.Message.toObjectList(msg.getFilmsList(),
    proto.films.FilmData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.films.RetrieveFilmsResponse}
 */
proto.films.RetrieveFilmsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.films.RetrieveFilmsResponse;
  return proto.films.RetrieveFilmsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.films.RetrieveFilmsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.films.RetrieveFilmsResponse}
 */
proto.films.RetrieveFilmsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.films.FilmData;
      reader.readMessage(value,proto.films.FilmData.deserializeBinaryFromReader);
      msg.addFilms(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.films.RetrieveFilmsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.films.RetrieveFilmsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.films.RetrieveFilmsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.films.RetrieveFilmsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilmsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.films.FilmData.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FilmData films = 1;
 * @return {!Array<!proto.films.FilmData>}
 */
proto.films.RetrieveFilmsResponse.prototype.getFilmsList = function() {
  return /** @type{!Array<!proto.films.FilmData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.films.FilmData, 1));
};


/** @param {!Array<!proto.films.FilmData>} value */
proto.films.RetrieveFilmsResponse.prototype.setFilmsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.films.FilmData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.films.FilmData}
 */
proto.films.RetrieveFilmsResponse.prototype.addFilms = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.films.FilmData, opt_index);
};


proto.films.RetrieveFilmsResponse.prototype.clearFilmsList = function() {
  this.setFilmsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.films.RetrieveFilmsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.films.RetrieveFilmsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.films.RetrieveFilmsRequest.displayName = 'proto.films.RetrieveFilmsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.films.RetrieveFilmsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.films.RetrieveFilmsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.films.RetrieveFilmsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.films.RetrieveFilmsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    limit: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.films.RetrieveFilmsRequest}
 */
proto.films.RetrieveFilmsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.films.RetrieveFilmsRequest;
  return proto.films.RetrieveFilmsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.films.RetrieveFilmsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.films.RetrieveFilmsRequest}
 */
proto.films.RetrieveFilmsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.films.RetrieveFilmsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.films.RetrieveFilmsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.films.RetrieveFilmsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.films.RetrieveFilmsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 limit = 1;
 * @return {number}
 */
proto.films.RetrieveFilmsRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.films.RetrieveFilmsRequest.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.films.RetrieveFilmRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.films.RetrieveFilmRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.films.RetrieveFilmRequest.displayName = 'proto.films.RetrieveFilmRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.films.RetrieveFilmRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.films.RetrieveFilmRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.films.RetrieveFilmRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.films.RetrieveFilmRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.films.RetrieveFilmRequest}
 */
proto.films.RetrieveFilmRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.films.RetrieveFilmRequest;
  return proto.films.RetrieveFilmRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.films.RetrieveFilmRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.films.RetrieveFilmRequest}
 */
proto.films.RetrieveFilmRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.films.RetrieveFilmRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.films.RetrieveFilmRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.films.RetrieveFilmRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.films.RetrieveFilmRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.films.RetrieveFilmRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.films.RetrieveFilmRequest.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.films.RetrieveFilmResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.films.RetrieveFilmResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.films.RetrieveFilmResponse.displayName = 'proto.films.RetrieveFilmResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.films.RetrieveFilmResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.films.RetrieveFilmResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.films.RetrieveFilmResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.films.RetrieveFilmResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.films.FilmData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.films.RetrieveFilmResponse}
 */
proto.films.RetrieveFilmResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.films.RetrieveFilmResponse;
  return proto.films.RetrieveFilmResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.films.RetrieveFilmResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.films.RetrieveFilmResponse}
 */
proto.films.RetrieveFilmResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.films.FilmData;
      reader.readMessage(value,proto.films.FilmData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.films.RetrieveFilmResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.films.RetrieveFilmResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.films.RetrieveFilmResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.films.RetrieveFilmResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.films.FilmData.serializeBinaryToWriter
    );
  }
};


/**
 * optional FilmData data = 1;
 * @return {?proto.films.FilmData}
 */
proto.films.RetrieveFilmResponse.prototype.getData = function() {
  return /** @type{?proto.films.FilmData} */ (
    jspb.Message.getWrapperField(this, proto.films.FilmData, 1));
};


/** @param {?proto.films.FilmData|undefined} value */
proto.films.RetrieveFilmResponse.prototype.setData = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.films.RetrieveFilmResponse.prototype.clearData = function() {
  this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.films.RetrieveFilmResponse.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.films.CreateFilmRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.films.CreateFilmRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.films.CreateFilmRequest.displayName = 'proto.films.CreateFilmRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.films.CreateFilmRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.films.CreateFilmRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.films.CreateFilmRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.films.CreateFilmRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.films.FilmData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.films.CreateFilmRequest}
 */
proto.films.CreateFilmRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.films.CreateFilmRequest;
  return proto.films.CreateFilmRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.films.CreateFilmRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.films.CreateFilmRequest}
 */
proto.films.CreateFilmRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.films.FilmData;
      reader.readMessage(value,proto.films.FilmData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.films.CreateFilmRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.films.CreateFilmRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.films.CreateFilmRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.films.CreateFilmRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.films.FilmData.serializeBinaryToWriter
    );
  }
};


/**
 * optional FilmData data = 1;
 * @return {?proto.films.FilmData}
 */
proto.films.CreateFilmRequest.prototype.getData = function() {
  return /** @type{?proto.films.FilmData} */ (
    jspb.Message.getWrapperField(this, proto.films.FilmData, 1));
};


/** @param {?proto.films.FilmData|undefined} value */
proto.films.CreateFilmRequest.prototype.setData = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.films.CreateFilmRequest.prototype.clearData = function() {
  this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.films.CreateFilmRequest.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.films.CreatePeopleRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.films.CreatePeopleRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.films.CreatePeopleRequest.displayName = 'proto.films.CreatePeopleRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.films.CreatePeopleRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.films.CreatePeopleRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.films.CreatePeopleRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.films.CreatePeopleRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.films.PeopleData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.films.CreatePeopleRequest}
 */
proto.films.CreatePeopleRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.films.CreatePeopleRequest;
  return proto.films.CreatePeopleRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.films.CreatePeopleRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.films.CreatePeopleRequest}
 */
proto.films.CreatePeopleRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.films.PeopleData;
      reader.readMessage(value,proto.films.PeopleData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.films.CreatePeopleRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.films.CreatePeopleRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.films.CreatePeopleRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.films.CreatePeopleRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.films.PeopleData.serializeBinaryToWriter
    );
  }
};


/**
 * optional PeopleData data = 1;
 * @return {?proto.films.PeopleData}
 */
proto.films.CreatePeopleRequest.prototype.getData = function() {
  return /** @type{?proto.films.PeopleData} */ (
    jspb.Message.getWrapperField(this, proto.films.PeopleData, 1));
};


/** @param {?proto.films.PeopleData|undefined} value */
proto.films.CreatePeopleRequest.prototype.setData = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.films.CreatePeopleRequest.prototype.clearData = function() {
  this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.films.CreatePeopleRequest.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.films.CreateJoinPeopleFilmRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.films.CreateJoinPeopleFilmRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.films.CreateJoinPeopleFilmRequest.displayName = 'proto.films.CreateJoinPeopleFilmRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.films.CreateJoinPeopleFilmRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.films.CreateJoinPeopleFilmRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.films.CreateJoinPeopleFilmRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.films.CreateJoinPeopleFilmRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    filmExternalReference: jspb.Message.getFieldWithDefault(msg, 1, ""),
    peopleExternalReference: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.films.CreateJoinPeopleFilmRequest}
 */
proto.films.CreateJoinPeopleFilmRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.films.CreateJoinPeopleFilmRequest;
  return proto.films.CreateJoinPeopleFilmRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.films.CreateJoinPeopleFilmRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.films.CreateJoinPeopleFilmRequest}
 */
proto.films.CreateJoinPeopleFilmRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilmExternalReference(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeopleExternalReference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.films.CreateJoinPeopleFilmRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.films.CreateJoinPeopleFilmRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.films.CreateJoinPeopleFilmRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.films.CreateJoinPeopleFilmRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilmExternalReference();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPeopleExternalReference();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string film_external_reference = 1;
 * @return {string}
 */
proto.films.CreateJoinPeopleFilmRequest.prototype.getFilmExternalReference = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.films.CreateJoinPeopleFilmRequest.prototype.setFilmExternalReference = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string people_external_reference = 2;
 * @return {string}
 */
proto.films.CreateJoinPeopleFilmRequest.prototype.getPeopleExternalReference = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.films.CreateJoinPeopleFilmRequest.prototype.setPeopleExternalReference = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.films);
